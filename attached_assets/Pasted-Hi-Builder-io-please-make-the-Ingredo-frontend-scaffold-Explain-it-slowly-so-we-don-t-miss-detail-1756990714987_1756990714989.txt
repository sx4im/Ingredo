Hi Builder.io — please make the Ingredo frontend scaffold. Explain it slowly so we don’t miss details.

Simple explanation:
Think of this like building the frame and paint for a real app home. Make a Vite + React app with TypeScript, Tailwind, and a little toolbox of reusable components.

What to build (step by step):
1. Create a Vite React + TypeScript project: `npm create vite@latest ingredo -- --template react-ts`.
2. Install & configure Tailwind CSS and PostCSS.
3. Create a Design System folder `src/ui/` with:
   - tokens (colors, spacing, fonts, radii) in `src/ui/tokens.ts`.
   - a ThemeProvider (React Context) that supports light/dark mode persisted to localStorage.
   - accessible components with TypeScript and tests:
     - Button, IconButton, Input, Textarea, Chip, Tag, Card, Modal, Toggle, Select, Slider, Badge.
   - Each component exports types and has Storybook stories.
4. App Shell:
   - Use React Router v6 for routing.
   - Build an `AppShell` with Header (Ingredo logo, global search icon, profile menu), Mobile Nav, and Footer.
   - Routes to create: `/` (landing), `/search`, `/recipe/:slug`, `/profile`, `/admin`.
5. Data & network:
   - Install React Query (TanStack Query) and set up a `QueryClientProvider`.
   - Create an `apiClient` wrapper (`src/lib/apiClient.ts`) that uses fetch, sends JSON, handles non-2xx by throwing, and handles 401 globally.
6. UX utilities:
   - Global ErrorBoundary component and a Toast system (context + portal).
7. Tooling:
   - Add ESLint, Prettier, TypeScript config, and Husky pre-commit hook that runs lint and tests.
8. Storybook:
   - Install Storybook and add stories for each UI component.
9. Dev scripts:
   - Provide `npm run dev` (vite), `npm run build`, `npm run storybook`, `npm run test`.
10. Small README:
   - Include quick dev steps, environment variables placeholder, and the fact this is "Ingredo".

Backend contract (for now):
- `GET /api/health` -> `{ ok: true }`
- `GET /api/ingredients?q=tomato` -> `{ suggestions: [{name:"tomato",score:0.9}], popular: [] }`

Accessibility & small rules:
- All focusable controls must show visible focus rings for keyboard users.
- Buttons must have `aria-label` where needed.
- Colors from tokens should pass WCAG AA contrast.

Tests & stories:
- Unit tests for Button, Input, and apiClient (Jest + React Testing Library).
- Storybook stories for each component.

Acceptance criteria:
- `npm run dev` boots the app and shows AppShell + homepage.
- Theme toggles and persists.
- Storybook runs and shows components.
- Husky pre-commit triggers lint/tests.

Commit message suggestion:
`feat(ui): scaffold Ingredo app (Vite + React) + design system and AppShell`
